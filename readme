    Система “РАДАР” состоит из как минимум из двух частей. Основная
его часть занимается получение данных от драйвера радар и записью
данных в хранилище. В задачи остальных частей входит получение данных
из хранилища и их последующая обработка. В реализованном тестовом
задание роль данных частей системы играют приложения core и client
соответственно.
    Отображаемые на радаре объекты описывает класс Target из файла
target.h. Класс Target содержит в себе имя объекта и список
происходивших с ним событий. Событие описывает класс Event. Событие
является слежение, потеря или обнаружение данного объекта в текущий
момент времени в данной точке.
    Также в системе реализована обработка ошибок при помощи класс
TError из файла terror.h. Класс TError предназначен для описание
происходящих в системе ошибок. Он имеет статические методы для
хранения и доступа к последней произошедшей в системе ошибке. В
случае если в какой либо вызываемой функции системы произошла ошибка
то данная функция должна сохранить описание данной ошибки при помощи
статической функции TError::SetCurrent и вернуть значение false.
Вызывающая функция получив результат выполнения false может получить
доступ к ошибки при помощи функции TError::GetCurrent.
    В приложение core есть три основных класса TargetsStorage,
TargetsSource, TargetsService. Основной задаче класс TargetsStorage
из файла targetsstorage.h служит предоставление абстракции от конкретных
механизмов хранения данных. В классе TargetsStorage есть методы Open и
AddTargets. Метод Open осуществляет доступ к хранилищу. А метод
AddTargets сохраняет данные в хранилище. Так же приложению могут
потребоваться доступ к ранее сохраненным данным. Для этого нужно
будет добавить в данный класс соответствующие методы. Для примера
хранилище реализован при помощи СУБД mysql и системы D-Bus (Для
уведомления клиентов). Класс TargetsSource из файла targetssource.h
служит для предоставления абстракции от драйвера радара. Когда драйвер
может предоставить новые данные об объектах он генерирует событие
TargetsReady. Любой класс может подписаться на данное событие и получить
данные об объектах при помощи функции  GetTargets. Для примера событие
TargetsReady генерируется по таймеру. Класс  targetsservice из файла
targetsservice.h должен связать класс TargetsSource и TargetsStorage.
В реальном приложение он должен реализовывать основную логику работы
приложения. Он подписывается на событие TargetsReady и получает данные
от драйвера и сохраняет их хранилище. В нем также может быть реализована
промежуточная обработка данных. 
    Приложение client описывает обобщенное приложение. Оно может быть,
как неким приложение для отображения реального местоположения объектов,
так и программы для просмотра пути конкретно объекта за конкретный
промежуток времени или же сервисом предоставляющем удаленным клиентам
некоторые данные. Данное приложение состоит из двух основных классов
TargetsService и ClientTargetsStorage. Класс TargetsService из файла
targetsservice.h должен реализовывать основную логику работы стороннего
приложения. В задачи класс ClientTargetsStorage из файла
сlienttargetsstorage.h входит предоставления абстракции для доступа
к хранилищу объектов для стороннего приложения. В тестовом примере
данный класс реализует событие TargetsAdded и методы  Open GetTargets
и GetLastTargets. Событие TargetsAdded генерируется при добавление в
хранилище новых данных. При помощи метода GetTargets можно получить
данный о конкретных объектах за конкретный промежуток времени. А при
помощи метода GetLastTargets можно получить информация об объектах с
максимальным временем.
